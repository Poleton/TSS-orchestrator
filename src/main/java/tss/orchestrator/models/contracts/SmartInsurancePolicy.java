package tss.orchestrator.models.contracts;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class SmartInsurancePolicy extends Contract {
    public static final String BINARY = "";

    public static final String FUNC_BROKER = "broker";

    public static final String FUNC_CLIENT = "client";

    public static final String FUNC_CONDITIONLEVELCOUNT = "conditionLevelCount";

    public static final String FUNC_CONDITIONLEVELS = "conditionLevels";

    public static final String FUNC_CONTRACTLIABILITY = "contractLiability";

    public static final String FUNC_CONTRACTPREMIUM = "contractPremium";

    public static final String FUNC_CONTRACTRESERVE = "contractReserve";

    public static final String FUNC_CONTRACTSTATE = "contractState";

    public static final String FUNC_INSURANCE = "insurance";

    public static final String FUNC_LIABILITYFUNDED = "liabilityFunded";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PARAMETERS = "parameters";

    public static final String FUNC_PREMIUMFUNDED = "premiumFunded";

    public static final String FUNC_SENSORCOUNT = "sensorCount";

    public static final String FUNC_SENSORS = "sensors";

    public static final String FUNC_SHIPMENTCOUNT = "shipmentCount";

    public static final String FUNC_SHIPMENTS = "shipments";

    public static final String FUNC_ACTIVATECONTRACT = "activateContract";

    public static final String FUNC_DEACTIVATECONTRACT = "deactivateContract";

    public static final String FUNC_FUNDCONTRACT = "fundContract";

    public static final String FUNC_ADDSHIPMENT = "addShipment";

    public static final String FUNC_ADDSENSOR = "addSensor";

    public static final String FUNC_ADDCONDITIONLEVEL = "addConditionLevel";

    public static final String FUNC_UPDATESENSOR = "updateSensor";

    public static final Event SENSORUPDATED_EVENT = new Event("SensorUpdated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected SmartInsurancePolicy(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SmartInsurancePolicy(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SmartInsurancePolicy(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SmartInsurancePolicy(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<SensorUpdatedEventResponse> getSensorUpdatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SENSORUPDATED_EVENT, transactionReceipt);
        ArrayList<SensorUpdatedEventResponse> responses = new ArrayList<SensorUpdatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SensorUpdatedEventResponse typedResponse = new SensorUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.levelID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sensorType = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.updatedData = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.updatedDataExcess = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.levelExcessTime = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.contractReserve = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SensorUpdatedEventResponse> sensorUpdatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SensorUpdatedEventResponse>() {
            @Override
            public SensorUpdatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SENSORUPDATED_EVENT, log);
                SensorUpdatedEventResponse typedResponse = new SensorUpdatedEventResponse();
                typedResponse.log = log;
                typedResponse.levelID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sensorType = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.updatedData = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.updatedDataExcess = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.levelExcessTime = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.contractReserve = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SensorUpdatedEventResponse> sensorUpdatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SENSORUPDATED_EVENT));
        return sensorUpdatedEventFlowable(filter);
    }

    public RemoteFunctionCall<String> broker() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BROKER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> client() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CLIENT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> conditionLevelCount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CONDITIONLEVELCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> conditionLevels(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CONDITIONLEVELS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> contractLiability() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CONTRACTLIABILITY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> contractPremium() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CONTRACTPREMIUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> contractReserve() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CONTRACTRESERVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> contractState() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CONTRACTSTATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> insurance() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_INSURANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> liabilityFunded() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LIABILITYFUNDED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, String>> parameters() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PARAMETERS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, String>>(function,
                new Callable<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, String>>() {
                    @Override
                    public Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (String) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Boolean> premiumFunded() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PREMIUMFUNDED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> sensorCount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SENSORCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>> sensors(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SENSORS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple3<BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> shipmentCount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SHIPMENTCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>> shipments(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SHIPMENTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> activateContract(BigInteger _activationTimestamp) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ACTIVATECONTRACT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_activationTimestamp)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deactivateContract(BigInteger _deactivationTimestamp) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DEACTIVATECONTRACT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_deactivationTimestamp)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> fundContract(BigInteger _amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_FUNDCONTRACT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addShipment(BigInteger _ID, BigInteger _liability) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDSHIPMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int256(_ID), 
                new org.web3j.abi.datatypes.generated.Uint256(_liability)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addSensor(BigInteger _ID, BigInteger _sensorType) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDSENSOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int256(_ID), 
                new org.web3j.abi.datatypes.generated.Int256(_sensorType)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addConditionLevel(BigInteger _levelDepth, BigInteger _sensorType, BigInteger _dataRangeMin, BigInteger _dataRangeMax, BigInteger _percentualWeight) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDCONDITIONLEVEL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int256(_levelDepth), 
                new org.web3j.abi.datatypes.generated.Int256(_sensorType), 
                new org.web3j.abi.datatypes.generated.Int256(_dataRangeMin), 
                new org.web3j.abi.datatypes.generated.Int256(_dataRangeMax), 
                new org.web3j.abi.datatypes.generated.Uint256(_percentualWeight)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateSensor(BigInteger _ID, BigInteger _sensorData, BigInteger _dataTimestamp) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATESENSOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int256(_ID), 
                new org.web3j.abi.datatypes.generated.Int256(_sensorData), 
                new org.web3j.abi.datatypes.generated.Uint256(_dataTimestamp)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static SmartInsurancePolicy load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SmartInsurancePolicy(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SmartInsurancePolicy load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SmartInsurancePolicy(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SmartInsurancePolicy load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new SmartInsurancePolicy(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SmartInsurancePolicy load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SmartInsurancePolicy(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SmartInsurancePolicy> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _contractCurrency, String _client, String _insurance, String _broker, BigInteger _premium, BigInteger _liability, BigInteger _inception, BigInteger _expiry, String _scope) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_contractCurrency), 
                new org.web3j.abi.datatypes.Address(_client), 
                new org.web3j.abi.datatypes.Address(_insurance), 
                new org.web3j.abi.datatypes.Address(_broker), 
                new org.web3j.abi.datatypes.generated.Uint256(_premium), 
                new org.web3j.abi.datatypes.generated.Uint256(_liability), 
                new org.web3j.abi.datatypes.generated.Uint256(_inception), 
                new org.web3j.abi.datatypes.generated.Uint256(_expiry), 
                new org.web3j.abi.datatypes.Utf8String(_scope)));
        return deployRemoteCall(SmartInsurancePolicy.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<SmartInsurancePolicy> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _contractCurrency, String _client, String _insurance, String _broker, BigInteger _premium, BigInteger _liability, BigInteger _inception, BigInteger _expiry, String _scope) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_contractCurrency), 
                new org.web3j.abi.datatypes.Address(_client), 
                new org.web3j.abi.datatypes.Address(_insurance), 
                new org.web3j.abi.datatypes.Address(_broker), 
                new org.web3j.abi.datatypes.generated.Uint256(_premium), 
                new org.web3j.abi.datatypes.generated.Uint256(_liability), 
                new org.web3j.abi.datatypes.generated.Uint256(_inception), 
                new org.web3j.abi.datatypes.generated.Uint256(_expiry), 
                new org.web3j.abi.datatypes.Utf8String(_scope)));
        return deployRemoteCall(SmartInsurancePolicy.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<SmartInsurancePolicy> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _contractCurrency, String _client, String _insurance, String _broker, BigInteger _premium, BigInteger _liability, BigInteger _inception, BigInteger _expiry, String _scope) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_contractCurrency), 
                new org.web3j.abi.datatypes.Address(_client), 
                new org.web3j.abi.datatypes.Address(_insurance), 
                new org.web3j.abi.datatypes.Address(_broker), 
                new org.web3j.abi.datatypes.generated.Uint256(_premium), 
                new org.web3j.abi.datatypes.generated.Uint256(_liability), 
                new org.web3j.abi.datatypes.generated.Uint256(_inception), 
                new org.web3j.abi.datatypes.generated.Uint256(_expiry), 
                new org.web3j.abi.datatypes.Utf8String(_scope)));
        return deployRemoteCall(SmartInsurancePolicy.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<SmartInsurancePolicy> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _contractCurrency, String _client, String _insurance, String _broker, BigInteger _premium, BigInteger _liability, BigInteger _inception, BigInteger _expiry, String _scope) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_contractCurrency), 
                new org.web3j.abi.datatypes.Address(_client), 
                new org.web3j.abi.datatypes.Address(_insurance), 
                new org.web3j.abi.datatypes.Address(_broker), 
                new org.web3j.abi.datatypes.generated.Uint256(_premium), 
                new org.web3j.abi.datatypes.generated.Uint256(_liability), 
                new org.web3j.abi.datatypes.generated.Uint256(_inception), 
                new org.web3j.abi.datatypes.generated.Uint256(_expiry), 
                new org.web3j.abi.datatypes.Utf8String(_scope)));
        return deployRemoteCall(SmartInsurancePolicy.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class SensorUpdatedEventResponse extends BaseEventResponse {
        public BigInteger levelID;

        public BigInteger sensorType;

        public BigInteger updatedData;

        public BigInteger updatedDataExcess;

        public BigInteger levelExcessTime;

        public BigInteger contractReserve;
    }
}
