package tss.orchestrator.models.contracts;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class SmartInsurancePolicy extends Contract {
    public static final String BINARY = "0x608060405260008060016101000a81548160ff02191690831515021790555060008060026101000a81548160ff02191690831515021790555060006007556000600d556000600f5560006011553480156200005957600080fd5b5060405162002d6038038062002d6083398181016040528101906200007f9190620003f7565b88600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600060036101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600581905550836006819055506040518060a00160405280848152602001600081526020018381526020016000815260200182815250600860008201518160000155602082015181600101556040820151816002015560608201518160030155608082015181600401908051906020019062000243929190620002a7565b5090505060008060006101000a81548160ff0219169083600381111562000293577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b0217905550505050505050505050620006cb565b828054620002b590620005bc565b90600052602060002090601f016020900481019282620002d9576000855562000325565b82601f10620002f457805160ff191683800117855562000325565b8280016001018555821562000325579182015b828111156200032457825182559160200191906001019062000307565b5b50905062000334919062000338565b5090565b5b808211156200035357600081600090555060010162000339565b5090565b60006200036e620003688462000512565b620004e9565b9050828152602081018484840111156200038757600080fd5b6200039484828562000586565b509392505050565b600081519050620003ad8162000697565b92915050565b600082601f830112620003c557600080fd5b8151620003d784826020860162000357565b91505092915050565b600081519050620003f181620006b1565b92915050565b60008060008060008060008060006101208a8c0312156200041757600080fd5b6000620004278c828d016200039c565b99505060206200043a8c828d016200039c565b98505060406200044d8c828d016200039c565b9750506060620004608c828d016200039c565b9650506080620004738c828d01620003e0565b95505060a0620004868c828d01620003e0565b94505060c0620004998c828d01620003e0565b93505060e0620004ac8c828d01620003e0565b9250506101008a015167ffffffffffffffff811115620004cb57600080fd5b620004d98c828d01620003b3565b9150509295985092959850929598565b6000620004f562000508565b9050620005038282620005f2565b919050565b6000604051905090565b600067ffffffffffffffff82111562000530576200052f62000657565b5b6200053b8262000686565b9050602081019050919050565b600062000555826200055c565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015620005a657808201518184015260208101905062000589565b83811115620005b6576000848401525b50505050565b60006002820490506001821680620005d557607f821691505b60208210811415620005ec57620005eb62000628565b5b50919050565b620005fd8262000686565b810181811067ffffffffffffffff821117156200061f576200061e62000657565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b620006a28162000548565b8114620006ae57600080fd5b50565b620006bc816200057c565b8114620006c857600080fd5b50565b61268580620006db6000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80637742faa0116100c3578063aace20b71161007c578063aace20b7146103c6578063abff0110146103e4578063b4a2d38614610402578063bca8f2ee14610420578063d6134e4f1461043c578063fd4263021461045857610158565b80637742faa01461031057806385209ee01461032e578063890357301461034c57806389cf32041461036e5780638da5cb5b1461038c5780639f80ee13146103aa57610158565b80633519a2f8116101155780633519a2f81461024c57806335c2bd631461026857806340b7e23f14610284578063412f2e82146102a25780635627c2f8146102d4578063642cd787146102f257610158565b806309dfcd001461015d5780630a400a9d14610191578063109e94cf146101ad5780631780a5de146101cb57806322a45cd0146101e95780632ac08a9314610219575b600080fd5b61017760048036038101906101729190611a8b565b610476565b604051610188959493929190611ceb565b60405180910390f35b6101ab60048036038101906101a69190611a00565b6104ac565b005b6101b56108b2565b6040516101c29190611be7565b60405180910390f35b6101d36108d8565b6040516101e09190611c2b565b60405180910390f35b61020360048036038101906101fe9190611a8b565b6108eb565b6040516102109190611e5a565b60405180910390f35b610233600480360381019061022e9190611a8b565b610bdf565b6040516102439493929190611d75565b60405180910390f35b61026660048036038101906102619190611a8b565b610c0f565b005b610282600480360381019061027d9190611a8b565b610d3e565b005b61028c610f52565b6040516102999190611c2b565b60405180910390f35b6102bc60048036038101906102b79190611a8b565b610f65565b6040516102cb93929190611d3e565b60405180910390f35b6102dc610f8f565b6040516102e99190611e5a565b60405180910390f35b6102fa610f95565b6040516103079190611e5a565b60405180910390f35b610318610f9b565b6040516103259190611e5a565b60405180910390f35b610336610fa1565b6040516103439190611c46565b60405180910390f35b610354610fb2565b604051610365959493929190611e75565b60405180910390f35b61037661105e565b6040516103839190611be7565b60405180910390f35b610394611084565b6040516103a19190611be7565b60405180910390f35b6103c460048036038101906103bf9190611989565b6110aa565b005b6103ce611313565b6040516103db9190611e5a565b60405180910390f35b6103ec611319565b6040516103f99190611be7565b60405180910390f35b61040a61133f565b6040516104179190611e5a565b60405180910390f35b61043a6004803603810190610435919061194d565b611345565b005b61045660048036038101906104519190611a4f565b61158e565b005b610460611731565b60405161046d9190611e5a565b60405180910390f35b60126020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154905085565b600260038111156104e6577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60008054906101000a900460ff16600381111561052c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1461056c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056390611e3a565b60405180910390fd5b6008600201544210610588576105866008600201546108eb565b505b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff905060007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff905060007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90506000805b600f54811015610865578760106000838152602001908152602001600020600001541415610852576010600082815260200190815260200160002060010154935060005b60115481101561083557600a601260008381526020019081526020016000206000015461066c9190611fd5565b6010600084815260200190815260200160002060000154141561082257876012600083815260200190815260200160002060010154131580156106c45750601260008281526020019081526020016000206002015488125b156108215760006010600084815260200190815260200160002060020154146107ae576000601260008381526020019081526020016000206004015490506010600084815260200190815260200160002060020154886107249190612275565b6012600084815260200190815260200160002060040160008282546107499190611f7f565b925050819055506107a8601260008481526020019081526020016000206000015482601260008681526020019081526020016000206004015461078c9190612275565b6012600086815260200190815260200160002060030154611737565b506107ca565b8660106000848152602001908152602001600020600201819055505b6012600082815260200190815260200160002060000154955060126000828152602001908152602001600020600101548861080591906121e1565b9350601260008281526020019081526020016000206004015492505b5b808061082d90612392565b91505061063f565b508560106000838152602001908152602001600020600201819055505b808061085d90612392565b9150506105fb565b507fcb9275e6c9263c93d9418c945e6509684b2337d2f671299959203cacd0c566d184848885856007546040516108a196959493929190611c8a565b60405180910390a150505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060029054906101000a900460ff1681565b600060026003811115610927577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60008054906101000a900460ff16600381111561096d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b146109ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a490611e3a565b60405180910390fd5b8160086003018190555060006007541115610a9757600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166007546040518363ffffffff1660e01b8152600401610a43929190611c02565b602060405180830381600087803b158015610a5d57600080fd5b505af1158015610a71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a959190611924565b505b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600754600654610b089190612275565b600554610b159190611f7f565b6040518363ffffffff1660e01b8152600401610b32929190611c02565b602060405180830381600087803b158015610b4c57600080fd5b505af1158015610b60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b849190611924565b5060036000806101000a81548160ff02191690836003811115610bd0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b02179055506007549050919050565b600e6020528060005260406000206000915090508060000154908060010154908060020154908060030154905084565b60006003811115610c49577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60008054906101000a900460ff166003811115610c8f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14610ccf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc690611dba565b60405180910390fd5b6008600201544210610ceb57610ce96008600201546108eb565b505b60016000806101000a81548160ff02191690836003811115610d36577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555050565b60016003811115610d78577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60008054906101000a900460ff166003811115610dbe577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14610dfe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df590611e1a565b60405180910390fd5b6008600201544210610e1a57610e186008600201546108eb565b505b6000805b600d54811015610e5f57600e60008281526020019081526020016000206001015482610e4a9190611f7f565b91508080610e5790612392565b915050610e1e565b506006548114610ea4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9b90611dda565b60405180910390fd5b8160086001018190555060026000806101000a81548160ff02191690836003811115610ef9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b02179055505060026000806101000a81548160ff02191690836003811115610f4a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555050565b600060019054906101000a900460ff1681565b60106020528060005260406000206000915090508060000154908060010154908060020154905083565b60055481565b600f5481565b60115481565b60008054906101000a900460ff1681565b6008806000015490806001015490806002015490806003015490806004018054610fdb90612360565b80601f016020809104026020016040519081016040528092919081815260200182805461100790612360565b80156110545780601f1061102957610100808354040283529160200191611054565b820191906000526020600020905b81548152906001019060200180831161103757829003601f168201915b5050505050905085565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060038111156110e4577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60008054906101000a900460ff16600381111561112a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1461116a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116190611dba565b60405180910390fd5b8460008112156111af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111a690611dfa565b60405180910390fd5b60086002015442106111cb576111c96008600201546108eb565b505b60005b600f5481101561130a5785601060008381526020019081526020016000206001015414156112f757600087600a601060008581526020019081526020016000206000015461121c9190612070565b6112269190611eeb565b90506040518060a00160405280828152602001878152602001868152602001858152602001600081525060126000601154815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030155608082015181600401559050506001601160008282546112ad9190611f7f565b925050819055507fa455bc9cf0f6db1b20ba99c98903a79e15844cb18853826e5d341c7ccbe16b0b818787876011546040516112ed959493929190611ceb565b60405180910390a1505b808061130290612392565b9150506111ce565b50505050505050565b600d5481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60065481565b6000600381111561137f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60008054906101000a900460ff1660038111156113c5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14611405576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113fc90611dba565b60405180910390fd5b81600081121561144a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144190611dfa565b60405180910390fd5b6008600201544210611466576114646008600201546108eb565b505b600061147384600161189a565b905060005b600d5481101561154e5781600e600083815260200190815260200160002060000154141561153b576040518060600160405280868152602001858152602001600081525060106000600f5481526020019081526020016000206000820151816000015560208201518160010155604082015181600201559050506001600f60008282546115059190611f7f565b925050819055506001600e600083815260200190815260200160002060030160008282546115339190611f7f565b925050819055505b808061154690612392565b915050611478565b507f10dd8880b911eab3d99dd2860007df72928ab52e401d44fb3956c3cebf8d80fc8484604051611580929190611c61565b60405180910390a150505050565b600060038111156115c8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60008054906101000a900460ff16600381111561160e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1461164e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164590611dba565b60405180910390fd5b816000811215611693576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168a90611dfa565b60405180910390fd5b60086002015442106116af576116ad6008600201546108eb565b505b6040518060800160405280848152602001838152602001600081526020016000815250600e6000600d548152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301559050506001600d60008282546117259190611f7f565b92505081905550505050565b60075481565b600061174484600261189a565b9050600060078190555060005b600d548110156118935781600e600083815260200190815260200160002060000154141561185157606483603c86611789919061203f565b6117939190612187565b600e6000848152602001908152602001600020600101546117b49190612187565b6117be919061203f565b600e600083815260200190815260200160002060020160008282546117e39190611f7f565b92505081905550600e600082815260200190815260200160002060010154600e600083815260200190815260200160002060020154111561185057600e600082815260200190815260200160002060010154600e6000838152602001908152602001600020600201819055505b5b600e600082815260200190815260200160002060020154600760008282546118799190611f7f565b92505081905550808061188b90612392565b915050611751565b5050505050565b600080600090505b828160ff1610156118cf57600a846118ba9190611fd5565b935080806118c7906123db565b9150506118a2565b50600a836118dd9190612405565b905092915050565b6000815190506118f48161260a565b92915050565b60008135905061190981612621565b92915050565b60008135905061191e81612638565b92915050565b60006020828403121561193657600080fd5b6000611944848285016118e5565b91505092915050565b6000806040838503121561196057600080fd5b600061196e858286016118fa565b925050602061197f858286016118fa565b9150509250929050565b600080600080600060a086880312156119a157600080fd5b60006119af888289016118fa565b95505060206119c0888289016118fa565b94505060406119d1888289016118fa565b93505060606119e2888289016118fa565b92505060806119f38882890161190f565b9150509295509295909350565b600080600060608486031215611a1557600080fd5b6000611a23868287016118fa565b9350506020611a34868287016118fa565b9250506040611a458682870161190f565b9150509250925092565b60008060408385031215611a6257600080fd5b6000611a70858286016118fa565b9250506020611a818582860161190f565b9150509250929050565b600060208284031215611a9d57600080fd5b6000611aab8482850161190f565b91505092915050565b611abd816122a9565b82525050565b611acc816122bb565b82525050565b611adb8161231b565b82525050565b611aea816122da565b82525050565b6000611afb82611ecf565b611b058185611eda565b9350611b1581856020860161232d565b611b1e816124f2565b840191505092915050565b6000611b36601a83611eda565b9150611b4182612503565b602082019050919050565b6000611b59602583611eda565b9150611b648261252c565b604082019050919050565b6000611b7c600c83611eda565b9150611b878261257b565b602082019050919050565b6000611b9f601583611eda565b9150611baa826125a4565b602082019050919050565b6000611bc2601883611eda565b9150611bcd826125cd565b602082019050919050565b611be181612304565b82525050565b6000602082019050611bfc6000830184611ab4565b92915050565b6000604082019050611c176000830185611ab4565b611c246020830184611bd8565b9392505050565b6000602082019050611c406000830184611ac3565b92915050565b6000602082019050611c5b6000830184611ad2565b92915050565b6000604082019050611c766000830185611ae1565b611c836020830184611ae1565b9392505050565b600060c082019050611c9f6000830189611ae1565b611cac6020830188611ae1565b611cb96040830187611ae1565b611cc66060830186611ae1565b611cd36080830185611bd8565b611ce060a0830184611bd8565b979650505050505050565b600060a082019050611d006000830188611ae1565b611d0d6020830187611ae1565b611d1a6040830186611ae1565b611d276060830185611bd8565b611d346080830184611bd8565b9695505050505050565b6000606082019050611d536000830186611ae1565b611d606020830185611ae1565b611d6d6040830184611bd8565b949350505050565b6000608082019050611d8a6000830187611ae1565b611d976020830186611bd8565b611da46040830185611bd8565b611db16060830184611bd8565b95945050505050565b60006020820190508181036000830152611dd381611b29565b9050919050565b60006020820190508181036000830152611df381611b4c565b9050919050565b60006020820190508181036000830152611e1381611b6f565b9050919050565b60006020820190508181036000830152611e3381611b92565b9050919050565b60006020820190508181036000830152611e5381611bb5565b9050919050565b6000602082019050611e6f6000830184611bd8565b92915050565b600060a082019050611e8a6000830188611bd8565b611e976020830187611bd8565b611ea46040830186611bd8565b611eb16060830185611bd8565b8181036080830152611ec38184611af0565b90509695505050505050565b600081519050919050565b600082825260208201905092915050565b6000611ef6826122da565b9150611f01836122da565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831360008312151615611f3c57611f3b612436565b5b817f8000000000000000000000000000000000000000000000000000000000000000038312600083121615611f7457611f73612436565b5b828201905092915050565b6000611f8a82612304565b9150611f9583612304565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611fca57611fc9612436565b5b828201905092915050565b6000611fe0826122da565b9150611feb836122da565b925082611ffb57611ffa612465565b5b600160000383147f80000000000000000000000000000000000000000000000000000000000000008314161561203457612033612436565b5b828205905092915050565b600061204a82612304565b915061205583612304565b92508261206557612064612465565b5b828204905092915050565b600061207b826122da565b9150612086836122da565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156120c5576120c4612436565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561210257612101612436565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561213f5761213e612436565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561217c5761217b612436565b5b828202905092915050565b600061219282612304565b915061219d83612304565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156121d6576121d5612436565b5b828202905092915050565b60006121ec826122da565b91506121f7836122da565b9250827f80000000000000000000000000000000000000000000000000000000000000000182126000841215161561223257612231612436565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01821360008412161561226a57612269612436565b5b828203905092915050565b600061228082612304565b915061228b83612304565b92508282101561229e5761229d612436565b5b828203905092915050565b60006122b4826122e4565b9050919050565b60008115159050919050565b60008190506122d5826125f6565b919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000612326826122c7565b9050919050565b60005b8381101561234b578082015181840152602081019050612330565b8381111561235a576000848401525b50505050565b6000600282049050600182168061237857607f821691505b6020821081141561238c5761238b6124c3565b5b50919050565b600061239d82612304565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156123d0576123cf612436565b5b600182019050919050565b60006123e68261230e565b915060ff8214156123fa576123f9612436565b5b600182019050919050565b6000612410826122da565b915061241b836122da565b92508261242b5761242a612465565b5b828207905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f496e697469616c697a6564205374617465205265717569726564000000000000600082015250565b7f41637469766174696f6e20526571756972656d656e7473204e6f7420436f6d7060008201527f6c65746564000000000000000000000000000000000000000000000000000000602082015250565b7f4e6f742056616c69642049440000000000000000000000000000000000000000600082015250565b7f46756e6465642053746174652052657175697265640000000000000000000000600082015250565b7f4163746976617465642053746174652052657175697265640000000000000000600082015250565b6004811061260757612606612494565b5b50565b612613816122bb565b811461261e57600080fd5b50565b61262a816122da565b811461263557600080fd5b50565b61264181612304565b811461264c57600080fd5b5056fea26469706673582212204bbda12c131666f3795ce31acd0c13e85ca974373c530871ad1d6ed7cd5dd47464736f6c63430008010033";

    public static final String FUNC_BROKER = "broker";

    public static final String FUNC_CLIENT = "client";

    public static final String FUNC_CONDITIONLEVELCOUNT = "conditionLevelCount";

    public static final String FUNC_CONDITIONLEVELS = "conditionLevels";

    public static final String FUNC_CONTRACTLIABILITY = "contractLiability";

    public static final String FUNC_CONTRACTPREMIUM = "contractPremium";

    public static final String FUNC_CONTRACTRESERVE = "contractReserve";

    public static final String FUNC_CONTRACTSTATE = "contractState";

    public static final String FUNC_INSURANCE = "insurance";

    public static final String FUNC_LIABILITYFUNDED = "liabilityFunded";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PARAMETERS = "parameters";

    public static final String FUNC_PREMIUMFUNDED = "premiumFunded";

    public static final String FUNC_SENSORCOUNT = "sensorCount";

    public static final String FUNC_SENSORS = "sensors";

    public static final String FUNC_SHIPMENTCOUNT = "shipmentCount";

    public static final String FUNC_SHIPMENTS = "shipments";

    public static final String FUNC_ACTIVATECONTRACT = "activateContract";

    public static final String FUNC_DEACTIVATECONTRACT = "deactivateContract";

    public static final String FUNC_FUNDCONTRACT = "fundContract";

    public static final String FUNC_ADDSHIPMENT = "addShipment";

    public static final String FUNC_ADDSENSOR = "addSensor";

    public static final String FUNC_ADDCONDITIONLEVEL = "addConditionLevel";

    public static final String FUNC_UPDATESENSOR = "updateSensor";

    public static final Event CONDITIONLEVELADDED_EVENT = new Event("ConditionLevelAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SENSORADDED_EVENT = new Event("SensorAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}));
    ;

    public static final Event SENSORUPDATED_EVENT = new Event("SensorUpdated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected SmartInsurancePolicy(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SmartInsurancePolicy(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SmartInsurancePolicy(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SmartInsurancePolicy(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ConditionLevelAddedEventResponse> getConditionLevelAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CONDITIONLEVELADDED_EVENT, transactionReceipt);
        ArrayList<ConditionLevelAddedEventResponse> responses = new ArrayList<ConditionLevelAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ConditionLevelAddedEventResponse typedResponse = new ConditionLevelAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.dataRangeMin = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.dataRangeMax = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.percentualWeight = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.conditionLevelCount = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ConditionLevelAddedEventResponse> conditionLevelAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ConditionLevelAddedEventResponse>() {
            @Override
            public ConditionLevelAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CONDITIONLEVELADDED_EVENT, log);
                ConditionLevelAddedEventResponse typedResponse = new ConditionLevelAddedEventResponse();
                typedResponse.log = log;
                typedResponse.ID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.dataRangeMin = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.dataRangeMax = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.percentualWeight = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.conditionLevelCount = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ConditionLevelAddedEventResponse> conditionLevelAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CONDITIONLEVELADDED_EVENT));
        return conditionLevelAddedEventFlowable(filter);
    }

    public List<SensorAddedEventResponse> getSensorAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SENSORADDED_EVENT, transactionReceipt);
        ArrayList<SensorAddedEventResponse> responses = new ArrayList<SensorAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SensorAddedEventResponse typedResponse = new SensorAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sensorType = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SensorAddedEventResponse> sensorAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SensorAddedEventResponse>() {
            @Override
            public SensorAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SENSORADDED_EVENT, log);
                SensorAddedEventResponse typedResponse = new SensorAddedEventResponse();
                typedResponse.log = log;
                typedResponse.ID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sensorType = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SensorAddedEventResponse> sensorAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SENSORADDED_EVENT));
        return sensorAddedEventFlowable(filter);
    }

    public List<SensorUpdatedEventResponse> getSensorUpdatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SENSORUPDATED_EVENT, transactionReceipt);
        ArrayList<SensorUpdatedEventResponse> responses = new ArrayList<SensorUpdatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SensorUpdatedEventResponse typedResponse = new SensorUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.levelID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sensorType = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.updatedData = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.updatedDataExcess = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.levelExcessTime = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.contractReserve = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SensorUpdatedEventResponse> sensorUpdatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SensorUpdatedEventResponse>() {
            @Override
            public SensorUpdatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SENSORUPDATED_EVENT, log);
                SensorUpdatedEventResponse typedResponse = new SensorUpdatedEventResponse();
                typedResponse.log = log;
                typedResponse.levelID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sensorType = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.updatedData = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.updatedDataExcess = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.levelExcessTime = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.contractReserve = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SensorUpdatedEventResponse> sensorUpdatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SENSORUPDATED_EVENT));
        return sensorUpdatedEventFlowable(filter);
    }

    public RemoteFunctionCall<String> broker() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BROKER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> client() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CLIENT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> conditionLevelCount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CONDITIONLEVELCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> conditionLevels(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CONDITIONLEVELS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> contractLiability() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CONTRACTLIABILITY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> contractPremium() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CONTRACTPREMIUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> contractReserve() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CONTRACTRESERVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> contractState() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CONTRACTSTATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> insurance() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_INSURANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> liabilityFunded() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LIABILITYFUNDED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, String>> parameters() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PARAMETERS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, String>>(function,
                new Callable<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, String>>() {
                    @Override
                    public Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (String) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Boolean> premiumFunded() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PREMIUMFUNDED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> sensorCount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SENSORCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>> sensors(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SENSORS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple3<BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> shipmentCount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SHIPMENTCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>> shipments(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SHIPMENTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> activateContract(BigInteger _activationTimestamp) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ACTIVATECONTRACT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_activationTimestamp)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deactivateContract(BigInteger _deactivationTimestamp) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DEACTIVATECONTRACT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_deactivationTimestamp)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> fundContract(BigInteger _amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_FUNDCONTRACT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addShipment(BigInteger _ID, BigInteger _liability) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDSHIPMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int256(_ID), 
                new org.web3j.abi.datatypes.generated.Uint256(_liability)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addSensor(BigInteger _ID, BigInteger _sensorType) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDSENSOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int256(_ID), 
                new org.web3j.abi.datatypes.generated.Int256(_sensorType)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addConditionLevel(BigInteger _levelDepth, BigInteger _sensorType, BigInteger _dataRangeMin, BigInteger _dataRangeMax, BigInteger _percentualWeight) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDCONDITIONLEVEL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int256(_levelDepth), 
                new org.web3j.abi.datatypes.generated.Int256(_sensorType), 
                new org.web3j.abi.datatypes.generated.Int256(_dataRangeMin), 
                new org.web3j.abi.datatypes.generated.Int256(_dataRangeMax), 
                new org.web3j.abi.datatypes.generated.Uint256(_percentualWeight)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateSensor(BigInteger _ID, BigInteger _sensorData, BigInteger _dataTimestamp) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATESENSOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int256(_ID), 
                new org.web3j.abi.datatypes.generated.Int256(_sensorData), 
                new org.web3j.abi.datatypes.generated.Uint256(_dataTimestamp)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static SmartInsurancePolicy load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SmartInsurancePolicy(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SmartInsurancePolicy load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SmartInsurancePolicy(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SmartInsurancePolicy load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new SmartInsurancePolicy(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SmartInsurancePolicy load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SmartInsurancePolicy(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SmartInsurancePolicy> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _contractCurrency, String _client, String _insurance, String _broker, BigInteger _premium, BigInteger _liability, BigInteger _inception, BigInteger _expiry, String _scope) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_contractCurrency), 
                new org.web3j.abi.datatypes.Address(_client), 
                new org.web3j.abi.datatypes.Address(_insurance), 
                new org.web3j.abi.datatypes.Address(_broker), 
                new org.web3j.abi.datatypes.generated.Uint256(_premium), 
                new org.web3j.abi.datatypes.generated.Uint256(_liability), 
                new org.web3j.abi.datatypes.generated.Uint256(_inception), 
                new org.web3j.abi.datatypes.generated.Uint256(_expiry), 
                new org.web3j.abi.datatypes.Utf8String(_scope)));
        return deployRemoteCall(SmartInsurancePolicy.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<SmartInsurancePolicy> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _contractCurrency, String _client, String _insurance, String _broker, BigInteger _premium, BigInteger _liability, BigInteger _inception, BigInteger _expiry, String _scope) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_contractCurrency), 
                new org.web3j.abi.datatypes.Address(_client), 
                new org.web3j.abi.datatypes.Address(_insurance), 
                new org.web3j.abi.datatypes.Address(_broker), 
                new org.web3j.abi.datatypes.generated.Uint256(_premium), 
                new org.web3j.abi.datatypes.generated.Uint256(_liability), 
                new org.web3j.abi.datatypes.generated.Uint256(_inception), 
                new org.web3j.abi.datatypes.generated.Uint256(_expiry), 
                new org.web3j.abi.datatypes.Utf8String(_scope)));
        return deployRemoteCall(SmartInsurancePolicy.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<SmartInsurancePolicy> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _contractCurrency, String _client, String _insurance, String _broker, BigInteger _premium, BigInteger _liability, BigInteger _inception, BigInteger _expiry, String _scope) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_contractCurrency), 
                new org.web3j.abi.datatypes.Address(_client), 
                new org.web3j.abi.datatypes.Address(_insurance), 
                new org.web3j.abi.datatypes.Address(_broker), 
                new org.web3j.abi.datatypes.generated.Uint256(_premium), 
                new org.web3j.abi.datatypes.generated.Uint256(_liability), 
                new org.web3j.abi.datatypes.generated.Uint256(_inception), 
                new org.web3j.abi.datatypes.generated.Uint256(_expiry), 
                new org.web3j.abi.datatypes.Utf8String(_scope)));
        return deployRemoteCall(SmartInsurancePolicy.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<SmartInsurancePolicy> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _contractCurrency, String _client, String _insurance, String _broker, BigInteger _premium, BigInteger _liability, BigInteger _inception, BigInteger _expiry, String _scope) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_contractCurrency), 
                new org.web3j.abi.datatypes.Address(_client), 
                new org.web3j.abi.datatypes.Address(_insurance), 
                new org.web3j.abi.datatypes.Address(_broker), 
                new org.web3j.abi.datatypes.generated.Uint256(_premium), 
                new org.web3j.abi.datatypes.generated.Uint256(_liability), 
                new org.web3j.abi.datatypes.generated.Uint256(_inception), 
                new org.web3j.abi.datatypes.generated.Uint256(_expiry), 
                new org.web3j.abi.datatypes.Utf8String(_scope)));
        return deployRemoteCall(SmartInsurancePolicy.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class ConditionLevelAddedEventResponse extends BaseEventResponse {
        public BigInteger ID;

        public BigInteger dataRangeMin;

        public BigInteger dataRangeMax;

        public BigInteger percentualWeight;

        public BigInteger conditionLevelCount;
    }

    public static class SensorAddedEventResponse extends BaseEventResponse {
        public BigInteger ID;

        public BigInteger sensorType;
    }

    public static class SensorUpdatedEventResponse extends BaseEventResponse {
        public BigInteger levelID;

        public BigInteger sensorType;

        public BigInteger updatedData;

        public BigInteger updatedDataExcess;

        public BigInteger levelExcessTime;

        public BigInteger contractReserve;
    }
}
